From d02c4fbb6ad7b8b4412875673dfe42a2adf4418a Mon Sep 17 00:00:00 2001
From: IzzelAliz <csh2001331@126.com>
Date: Wed, 5 May 2021 23:50:01 +0800
Subject: [PATCH] Wrap modded command arguments


diff --git a/protocol/src/main/java/io/izzel/lightfall/forge/WrappedArgumentType.java b/protocol/src/main/java/io/izzel/lightfall/forge/WrappedArgumentType.java
new file mode 100644
index 00000000..73d491fa
--- /dev/null
+++ b/protocol/src/main/java/io/izzel/lightfall/forge/WrappedArgumentType.java
@@ -0,0 +1,21 @@
+package io.izzel.lightfall.forge;
+
+import com.mojang.brigadier.StringReader;
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import lombok.Data;
+import lombok.RequiredArgsConstructor;
+
+@RequiredArgsConstructor
+@Data
+public class WrappedArgumentType implements ArgumentType<Object> {
+
+    public final String actualKey;
+    public final int actualIntKey;
+    public final byte[] actualPayload;
+
+    @Override
+    public Object parse(StringReader stringReader) throws CommandSyntaxException {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+}
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Commands.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Commands.java
index 80a16f65..5e016bf4 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Commands.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Commands.java
@@ -21,6 +21,7 @@ import com.mojang.brigadier.tree.ArgumentCommandNode;
 import com.mojang.brigadier.tree.CommandNode;
 import com.mojang.brigadier.tree.LiteralCommandNode;
 import com.mojang.brigadier.tree.RootCommandNode;
+import io.izzel.lightfall.forge.WrappedArgumentType;
 import io.netty.buffer.ByteBuf;
 import java.util.ArrayDeque;
 import java.util.Collection;
@@ -519,6 +520,64 @@ public class Commands extends DefinedPacket
                 DefinedPacket.writeString( t, buf );
             }
         };
+        // lightfall start
+        private static final ArgumentSerializer<String> FORGE_ENUM = new ArgumentSerializer<String>() {
+            @Override
+            protected String read(ByteBuf buf) {
+                return readString(buf);
+            }
+
+            @Override
+            protected void write(ByteBuf buf, String enumClass) {
+                writeString(enumClass, buf);
+            }
+        };
+        private static final int ARCLIGHT_WRAP_INDEX = -256;
+        private static final ProperArgumentSerializer<WrappedArgumentType> ARCLIGHT_WRAP = new ProperArgumentSerializer<WrappedArgumentType>() {
+            @Override
+            protected String getKey() {
+                throw new IllegalStateException();
+            }
+
+            @Override
+            protected String getKey(WrappedArgumentType t) {
+                return t.actualKey;
+            }
+
+            @Override
+            protected int getIntKey() {
+                throw new UnsupportedOperationException("getIntKey");
+            }
+
+            @Override
+            protected int getIntKey(WrappedArgumentType t) {
+                return t.actualIntKey;
+            }
+
+            @Override
+            protected WrappedArgumentType read(ByteBuf buf) {
+                throw new UnsupportedOperationException("read");
+            }
+
+            @Override
+            protected WrappedArgumentType read(ByteBuf buf, int protocolVersion) {
+                if (protocolVersion >= ProtocolConstants.MINECRAFT_1_19) {
+                    int actualKey = readVarInt(buf);
+                    byte[] bytes = readArray(buf);
+                    return new WrappedArgumentType(null, actualKey, bytes);
+                } else {
+                    String actualKey = readString(buf);
+                    byte[] bytes = readArray(buf);
+                    return new WrappedArgumentType(actualKey, -1, bytes);
+                }
+            }
+
+            @Override
+            protected void write(ByteBuf buf, WrappedArgumentType t) {
+                buf.writeBytes(t.actualPayload);
+            }
+        };
+        // lightfall end
 
         static
         {
@@ -682,6 +741,13 @@ public class Commands extends DefinedPacket
                 get( "minecraft:template_rotation" ),
                 get( "minecraft:uuid" )
             };
+            // lightfall start
+            PROVIDERS.put( "forge:enum", FORGE_ENUM );
+            PROVIDERS.put( "forge:modid", VOID );
+            PROVIDERS.put( "minecraft:", VOID );
+            PROVIDERS.put( "arclight:wrapped", ARCLIGHT_WRAP );
+            PROPER_PROVIDERS.put( WrappedArgumentType.class, ARCLIGHT_WRAP );
+            // lightfall end
         }
 
         private static void register(String name, ArgumentSerializer serializer)
@@ -702,7 +768,11 @@ public class Commands extends DefinedPacket
             if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19 )
             {
                 key = readVarInt( buf );
-
+                // lightfall - start
+                if (key.equals(ARCLIGHT_WRAP_INDEX)) {
+                    reader = ARCLIGHT_WRAP;
+                } else
+                // lightfall - end
                 if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_4 )
                 {
                     reader = IDS_1_19_4[(Integer) key];
@@ -718,7 +788,7 @@ public class Commands extends DefinedPacket
 
             Preconditions.checkArgument( reader != null, "No provider for argument " + key );
 
-            Object val = reader.read( buf );
+            Object val = reader.read( buf, protocolVersion ); // lightfall - use protocol version
             return val != null && PROPER_PROVIDERS.containsKey( val.getClass() ) ? (ArgumentType<?>) val : new DummyType( key, reader, val );
         }
 
@@ -729,10 +799,10 @@ public class Commands extends DefinedPacket
             {
                 if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19 )
                 {
-                    writeVarInt( proper.getIntKey(), buf );
+                    writeVarInt( proper.getIntKey(arg), buf ); // lightfall - use arg
                 } else
                 {
-                    writeString( proper.getKey(), buf );
+                    writeString( proper.getKey(arg), buf ); // lightfall - use arg
                 }
                 proper.write( buf, arg );
             } else
@@ -771,6 +841,12 @@ public class Commands extends DefinedPacket
 
             protected abstract T read(ByteBuf buf);
 
+            // lightfall start
+            protected T read(ByteBuf buf, int protocolVersion) {
+                return read(buf);
+            }
+            // lightfall end
+
             protected abstract void write(ByteBuf buf, T t);
         }
 
@@ -780,6 +856,16 @@ public class Commands extends DefinedPacket
             protected abstract int getIntKey();
 
             protected abstract String getKey();
+
+            // lightfall begin
+            protected String getKey(T t) {
+                return getKey();
+            }
+
+            protected int getIntKey(T t) {
+                return getIntKey();
+            }
+            // lightfall end
         }
     }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
index 89b98b36..4055dad9 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
@@ -93,6 +93,7 @@ public class DownstreamBridge extends PacketHandler
             // do not perform any actions if the user has already moved
             return;
         }
+        t.printStackTrace();
 
         // Waterfall start
         ServerInfo def = con.updateAndGetNextServer( server.getInfo() );
-- 
2.36.1.windows.1

